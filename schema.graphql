"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Person {
  firstName: String!
  id: UUID!
  lastName: String!
}

type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  rootItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [RootItemSortInput!]
  ): RootItemsConnection
}

type RootItem implements Node {
  displayName: String!
  id: ID!
  signingProgress: SigningProgress!
}

input RootItemSortInput {
  displayName: SortEnumType
  id: SortEnumType
  signingProgress: SigningProgressSortInput
}

"""A connection to a list of items."""
type RootItemsConnection {
  """A list of edges."""
  edges: [RootItemsEdge!]

  """A flattened list of the nodes."""
  nodes: [RootItem!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type RootItemsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: RootItem!
}

type SignerInfo {
  id: UUID!
  person: Person
  signed: Boolean!
  signingTimestamp: DateTime
}

type SigningProgress {
  id: UUID!
  signerInfos: [SignerInfo!]!
}

input SigningProgressSortInput {
  id: SortEnumType
}

enum SortEnumType {
  ASC
  DESC
}

scalar UUID
